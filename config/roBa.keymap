#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        Muhenkan {
            bindings = <&kp INT_MUHENKAN>;
            key-positions = <12 13>;
        };

        Kana {
            bindings = <&kp INT_KANA>;
            key-positions = <19 18>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W           &kp E           &kp R                       &kp T                                                 &kp Y        &kp U              &lt 5 I          &kp O           &kp P
&mt LEFT_CONTROL A  &mt LEFT_WIN S  &mt LEFT_ALT D  &mt LEFT_SHIFT F            &kp G        &kp LS(LG(TAB))           &kp MINUS      &kp H        &mt RIGHT_SHIFT J  &mt RIGHT_ALT K  &mt LEFT_WIN L  &mt RIGHT_CONTROL MINUS
&mt LEFT_SHIFT Z    &kp X           &kp C           &kp V                       &kp B        &kp COLON                 &kp SEMICOLON  &kp N        &kp M              &kp COMMA        &kp DOT         &kp SLASH
&kp TAB             &kp LEFT_WIN    &kp LEFT_ALT    &lt_to_layer_0 3 BACKSPACE  &lt 2 ENTER  &lt_to_layer_0 1 TAB      &lt 1 TAB      &lt 2 SPACE                                                      &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        ARROW_NUM {
            bindings = <
&kp ESCAPE                &kp HOME                 &kp UP_ARROW             &kp END                     &trans                       &trans                       &kp KP_NUMBER_7            &kp KP_NUMBER_8            &kp KP_NUMBER_9                &trans
&mt LEFT_CONTROL PAGE_UP  &mt LEFT_WIN LEFT_ARROW  &mt LEFT_ALT DOWN_ARROW  &mt LEFT_SHIFT RIGHT_ARROW  &kp END  &trans      &trans  &mt RIGHT_SHIFT KP_NUMBER_0  &mt RIGHT_ALT KP_NUMBER_4  &mt RIGHT_ALT KP_NUMBER_5  &mt RIGHT_CONTROL KP_NUMBER_6  &trans
&kp PAGE_DOWN             &kp LG(LS(LEFT_ARROW))   &trans                   &kp LG(LS(RIGHT_ARROW))     &trans   &trans      &trans  &trans                       &kp KP_NUMBER_1            &kp KP_NUMBER_2            &kp KP_NUMBER_3                &trans
&trans                    &trans                   &trans                   &trans                      &trans   &trans      &trans  &trans                                                                                                            &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        SYMBOL {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp CARET        &kp SLASH                         &kp BACKSLASH   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LESS_THAN     &kp GREATER_THAN
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp EQUAL     &trans      &trans  &kp UNDERSCORE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COLON         &kp SEMICOLON
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp QUESTION  &trans      &trans  &kp PIPE        &kp LEFT_BRACKET      &kp LEFT_BRACE         &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES
&trans                      &trans           &trans           &trans           &trans        &sl 6       &trans  &trans                                                                         &trans
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &none   &kp F1  &kp F2   &kp F3   &kp F4
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &none   &kp F5  &kp F6   &kp F7   &kp F8
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &none   &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                            &trans
            >;
        };

        MOUSE {
            bindings = <
&trans     &trans     &mkp MB5   &mkp MB4   &trans                      &trans  &mkp MB4  &mkp MB5  &trans    &trans
&trans     &mkp MB2   &mkp MB3   &mkp MB1   &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans     &trans     &trans     &trans     &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        BT_CONFIG {
            bindings = <
&none  &none  &none  &none   &none                            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&none  &none  &none  &none   &none   &none       &none        &none         &none         &none         &none         &none
&none  &none  &none  &none   &none   &none       &bootloader  &none         &none         &none         &none         &bt BT_CLR
&none  &none  &none  &trans  &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
